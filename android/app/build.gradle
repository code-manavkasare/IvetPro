apply plugin: "com.android.application"
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

import com.android.build.OutputFile


project.ext.react = [
    entryFile: "index.android.js"
]

// apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {

    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8 
        // sourceCompatibility 1.8
        // targetCompatibility 1.8
    }

    defaultConfig {
        applicationId "com.videowithmyvet"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 30
        versionName "2.1.21"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        //  ndk {
        //     // Specifies the ABI configurations of your native
        //     // libraries Gradle should build and package with your APK.
        //     abiFilters "armeabi-v7a", "x86"
        // }
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
                //v2SigningEnabled false
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
            // include "armeabi-v7a", "x86", "arm64-v8a", "x86-64"
            // include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            // def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86-64": 4]
            //def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    dexOptions {
        jumboMode true
    }

}
    dependencies {
        implementation 'org.webkit:android-jsc:+'
        implementation project(':react-native-device-info')
        implementation project(':react-native-firebase')
        implementation project(':react-native-webview')
        implementation project(':rn-fetch-blob')
        implementation project(':react-native-sound')
        implementation project(':react-native-image-picker')
        implementation project(':react-native-gesture-handler')
        implementation project(':react-native-vector-icons')
        implementation project(':react-native-twilio-video-webrtc')
        implementation fileTree(dir: "libs", include: ["*.jar"])
        implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
        implementation "com.facebook.react:react-native:+"  // From node_modules
        implementation "com.google.android.gms:play-services-base:16.1.0"
        implementation "com.google.firebase:firebase-core:16.0.9"
        implementation "com.google.firebase:firebase-messaging:18.0.0"
        implementation "com.google.firebase:firebase-firestore:19.0.0"
        implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
    transitive = true
  }
        compile project(':react-native-appstore-version-checker')

      implementation 'com.facebook.fresco:fresco:2.0.0'
       // For animated GIF support
      implementation 'com.facebook.fresco:animated-gif:2.0.0'

    }

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
    task copyDownloadableDepsToLibs(type: Copy) {
        from configurations.compile
        into 'libs'
    }
    apply plugin: 'com.google.gms.google-services'

crashlytics {
  enableNdk true
}